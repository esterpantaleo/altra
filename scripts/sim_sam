#!/bin/bash

# \file sim_sam
#

# Copyright (C) 2012-2013 Ester Pantaleo


#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by


# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of


# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


#


#**************************************************************************************************#
#            FILE:       sim_sam
#     DESCRIPTION:       Simulate reads
#          AUTHOR:       Ester Pantaleo
#         CREATED:       Sep 29, 2011
#        REQUIRES:       samtools
#**************************************************************************************************#


#================== FUNCTION ==============================================================                        
#         NAME: absdir                                                   
#  DESCRIPTION: This function returns the absolute path to the given path, i.e. the absolute       
#               path if the argument is a directory, or the absolute basename otherwise.           
#   ARGUMENT 1: path (a string)                                                                 
#==========================================================================================        
function absdir() {
    if [[ -n "$1" ]] ; then
	if [[ -d $1 ]] ; then
            pushd $1 2>&1 >/dev/null;
            echo $PWD;
            popd 2>&1 >/dev/null;
	else
            dname=`dirname $1`;
            pushd ${dname} 2>&1 >/dev/null;
            echo ${PWD};
            popd 2>&1 >/dev/null;
	fi
    fi
}

#-------------------------------------------------------------------------------------------        
#   Get the relative path of this script                           
#   transform the relative path to an absolute path.                                                
#-------------------------------------------------------------------------------------------          
BASEDIR=`dirname ${BASH_SOURCE-$0}`
BASEDIR=`absdir $BASEDIR`

sim_sam=$BASEDIR"/../src/sim_sam"



help(){
    echo -e "\
sim_sam generates a simulated bam file.
sim_sam generates reads of a specific length (specified by option -R) for a sample as if they were emitted by the list of transcripts provided in GenePred file (specified with option -g) in a region specified with option -L. The intensity of expression for each sample must be specified (use option -m).

usage: $0 options
       OPTIONS:
       -o <file>                                           Specify the path to the output bam file
       -g <file>                                           Specify the name of the GenePred file containing the gene model
       -L <chr:locusStart-locusEnd>                        A string with the name of the chromosome\":\"locusStart-locusEnd
       -R <int>                                            Read length
       -M <int>                                            Overhang used when mapping reads with junctions
       -m <double[,double,â€¦]>                              A \",\" separated list of the intensities for each transcript in the GenePred file
       -h                                                  Print help and exit

example: sim_sam -r ind1,ind2,ind3 -g ./GenePredFile -L chr15:38567531-38644544 -l 1,2 -R 46 -M 9 -m 5.,3.:3.,1.:5.,6. -o ./ind1.bam"

}

SAMTOOLS=samtools
hash $SAMTOOLS 2>/dev/null || { echo >&2 "Requires $SAMTOOLS but it's not installed.  Aborting."; exit 1; }

while getopts "ho:g:L:R:M:v:m:" OPTION
do
    case $OPTION in
        h)
            help
            exit 1
            ;;
        o) 
	    BamOut=$OPTARG
	    ;;
	g)
	    GenePredIn=$OPTARG
	    ;;
        L) 
	    LOCUS=$OPTARG
            ;;
        R)
	    RL=$OPTARG
	    ;;
	M)
	    OVERHANG=$OPTARG
	    ;;
	v)  
	    VERBOSE=$OPTARG
	    ;;
	m)
	    lambdas=$OPTARG
	    ;;
    esac
done




#============== FUNCTION ===========================                            
#         NAME:      simulate_data                                              
#  DESCRIPTION:      simulate reads                                             
#     REQUIRES:      samtools
#===================================================                            
simulate_data() {
    # define variables
    LOCUS_v=( `echo $LOCUS | tr ":" "\n" `)
    chr=${LOCUS_v[0]}
    interval=( `echo ${LOCUS_v[1]} | tr "-" "\n" `)
    locusStart=${interval[0]}
    locusEnd=${interval[1]}

    OUTPUT_FOLDER=`dirname ${BamOut}`
    if [[ ! -d $OUTPUT_FOLDER ]];then
        mkdir $OUTPUT_FOLDER
    fi

    # generate bam file and index it
    echo "Starting simulation:"
    echo $sim_sam ${GenePredIn} BamOut=${BamOut}".sam" lambda=${lambdas} RL=${RL} OVERHANG=${OVERHANG} chr=${chr} locusStart=${locusStart} locusEnd=${locusEnd}
    $sim_sam ${GenePredIn} ${BamOut}".sam" ${lambdas} ${RL} ${OVERHANG} ${chr} ${locusStart} ${locusEnd}
    ${SAMTOOLS} view -bSh ${BamOut}".sam" | ${SAMTOOLS} sort - ${BamOut}
    rm ${BamOut}".sam"
    ${SAMTOOLS} index ${BamOut}
}

########CHECK ARGUMENTS
check_arguments() {
    if [[ -z ${BamOut} ]]; then
	echo "ERROR: specify output bam file"
	usage
	exit 1
    fi
    if [[ -z ${LOCUS} ]];then
	echo "ERROR: missing LOCUS"
	usage
	exit 1
    fi
    if [[ -z ${GenePredIn} ]];then
	echo "ERROR: specify GenePred file"
	usage
	exit 1
    fi
    if [[ -z ${lambdas} ]];then
	echo "ERROR: specify lambdas"
        usage
        exit 1
    fi
    if [[ -z $RL ]];then
        echo "ERROR: specify read length"
        usage
        exit 1
    fi
    if [[ -z $OVERHANG ]];then
        echo "ERROR: specify overhang length"
        usage
        exit 1
    fi
}



#########RUN SIM_SAM.CPP
check_arguments
simulate_data 
